import {Events, Tweens} from "phaser";
import IComponent from "./IComponent.ts";
import Entity from "../entities/Entity.ts";
import Health from "./Health.ts";

export default class Invulnerability extends Events.EventEmitter implements IComponent {
    public enabled: boolean = true;

    private readonly _blinkDuration: number = 100;
    private _duration: number;
    private _entity: Entity;

    constructor(duration: number, entity: Entity) {
        super();
        this._duration = duration;
        this._entity = entity;

        const healthComponent = this._entity.getComponent(Health);
        if (!healthComponent)
            return;

        healthComponent.on(Health.CHANGE_EVENT, (currentHealth: number) => {
            if (currentHealth == 0)
                return;

            this.activate();
        });
    }

    public activate(): void {
        if (!this.enabled)
            return;

        const healthComponent = this._entity.getComponent(Health);
        if (!healthComponent)
            return;

        healthComponent.enabled = false;

        this._entity.scene.tweens.add({
                targets: this._entity,
                alpha: {from: 1, to: 0.3},
                ease: 'Linear',
                duration: this._blinkDuration,
                yoyo: true,
                repeat: this._duration / this._blinkDuration
            }
        ).once(Tweens.Events.TWEEN_COMPLETE, () => {
            this._entity.alpha = 1;
            healthComponent.enabled = true;
        });
    }
}